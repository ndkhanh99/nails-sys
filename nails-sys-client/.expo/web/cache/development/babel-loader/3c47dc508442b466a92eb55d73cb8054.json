{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTag = getTag;\nexports.setGestureState = exports.scrollTo = exports.measure = void 0;\n\nvar _findNodeHandle = _interopRequireDefault(require(\"react-native-web/dist/exports/findNodeHandle\"));\n\nvar _PlatformChecker = require(\"./PlatformChecker\");\n\nfunction getTag(view) {\n  return (0, _findNodeHandle.default)(view);\n}\n\nvar measure = function () {\n  var _f = function _f(animatedRef) {\n    if (!_WORKLET && !(0, _PlatformChecker.isChromeDebugger)()) {\n      throw new Error('(measure) method cannot be used on RN side!');\n    }\n\n    var viewTag = animatedRef();\n\n    var result = _measure(viewTag);\n\n    if (result.x === -1234567) {\n      throw new Error(\"The view with tag \" + viewTag + \" could not be measured\");\n    }\n\n    return result;\n  };\n\n  _f._closure = {\n    isChromeDebugger: _PlatformChecker.isChromeDebugger\n  };\n  _f.asString = \"function measure(animatedRef){const{isChromeDebugger}=jsThis._closure;{if(!_WORKLET&&!isChromeDebugger()){throw new Error('(measure) method cannot be used on RN side!');}const viewTag=animatedRef();const result=_measure(viewTag);if(result.x===-1234567){throw new Error(\\\"The view with tag \\\"+viewTag+\\\" could not be measured\\\");}return result;}}\";\n  _f.__workletHash = 7743315869169;\n  _f.__location = \"C:\\\\Users\\\\victhangnguyen\\\\nails-sys\\\\nails-sys-client\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\NativeMethods.js (6:7)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nexports.measure = measure;\n\nvar scrollTo = function () {\n  var _f = function _f(animatedRef, x, y, animated) {\n    if (!_WORKLET && !(0, _PlatformChecker.isChromeDebugger)()) {\n      return;\n    }\n\n    var viewTag = animatedRef();\n\n    _scrollTo(viewTag, x, y, animated);\n  };\n\n  _f._closure = {\n    isChromeDebugger: _PlatformChecker.isChromeDebugger\n  };\n  _f.asString = \"function scrollTo(animatedRef,x,y,animated){const{isChromeDebugger}=jsThis._closure;{if(!_WORKLET&&!isChromeDebugger()){return;}const viewTag=animatedRef();_scrollTo(viewTag,x,y,animated);}}\";\n  _f.__workletHash = 13469410603586;\n  _f.__location = \"C:\\\\Users\\\\victhangnguyen\\\\nails-sys\\\\nails-sys-client\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\NativeMethods.js (18:7)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nexports.scrollTo = scrollTo;\n\nvar setGestureState = function () {\n  var _f = function _f(handlerTag, newState) {\n    if (!_WORKLET && !(0, _PlatformChecker.isChromeDebugger)()) {\n      console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');\n    }\n\n    _setGestureState(handlerTag, newState);\n  };\n\n  _f._closure = {\n    isChromeDebugger: _PlatformChecker.isChromeDebugger\n  };\n  _f.asString = \"function setGestureState(handlerTag,newState){const{isChromeDebugger}=jsThis._closure;{if(!_WORKLET&&!isChromeDebugger()){console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');}_setGestureState(handlerTag,newState);}}\";\n  _f.__workletHash = 13583934599272;\n  _f.__location = \"C:\\\\Users\\\\victhangnguyen\\\\nails-sys\\\\nails-sys-client\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\NativeMethods.js (26:7)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nexports.setGestureState = setGestureState;","map":{"version":3,"sources":["C:/Users/victhangnguyen/nails-sys/nails-sys-client/node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js"],"names":["getTag","view","measure","animatedRef","_WORKLET","Error","viewTag","result","_measure","x","isChromeDebugger","scrollTo","y","animated","_scrollTo","setGestureState","handlerTag","newState","console","warn","_setGestureState"],"mappings":";;;;;;;;;;AACA;;AACO,SAASA,MAAT,CAAgBC,IAAhB,EAAsB;AACzB,SAAO,6BAAeA,IAAf,CAAP;AACH;;IACeC,O;uBAAQC,W,EAAa;AAEjC,QAAI,CAACC,QAAD,IAAa,CAAC,wCAAlB,EAAsC;AAClC,YAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH;;AACD,QAAMC,OAAO,GAAGH,WAAW,EAA3B;;AACA,QAAMI,MAAM,GAAGC,QAAQ,CAACF,OAAD,CAAvB;;AACA,QAAIC,MAAM,CAACE,CAAP,KAAa,CAAC,OAAlB,EAA2B;AACvB,YAAM,IAAIJ,KAAJ,wBAA+BC,OAA/B,4BAAN;AACH;;AACD,WAAOC,MAAP;AACH,G;;;sBAdmBG;;;;;;;;;;;;;IAeJC,Q;uBAASR,W,EAAaM,C,EAAGG,C,EAAGC,Q,EAAU;AAElD,QAAI,CAACT,QAAD,IAAa,CAAC,wCAAlB,EAAsC;AAClC;AACH;;AACD,QAAME,OAAO,GAAGH,WAAW,EAA3B;;AACAW,IAAAA,SAAS,CAACR,OAAD,EAAUG,CAAV,EAAaG,CAAb,EAAgBC,QAAhB,CAAT;AACH,G;;;sBAtBmBH;;;;;;;;;;;;;IAuBJK,e;uBAAgBC,U,EAAYC,Q,EAAU;AAElD,QAAI,CAACb,QAAD,IAAa,CAAC,wCAAlB,EAAsC;AAClCc,MAAAA,OAAO,CAACC,IAAR,CAAa,uEAAb;AACH;;AACDC,IAAAA,gBAAgB,CAACJ,UAAD,EAAaC,QAAb,CAAhB;AACH,G;;;sBA7BmBP","sourcesContent":["import { findNodeHandle } from 'react-native';\nimport { isChromeDebugger } from './PlatformChecker';\nexport function getTag(view) {\n    return findNodeHandle(view);\n}\nexport function measure(animatedRef) {\n    'worklet';\n    if (!_WORKLET && !isChromeDebugger()) {\n        throw new Error('(measure) method cannot be used on RN side!');\n    }\n    const viewTag = animatedRef();\n    const result = _measure(viewTag);\n    if (result.x === -1234567) {\n        throw new Error(`The view with tag ${viewTag} could not be measured`);\n    }\n    return result;\n}\nexport function scrollTo(animatedRef, x, y, animated) {\n    'worklet';\n    if (!_WORKLET && !isChromeDebugger()) {\n        return;\n    }\n    const viewTag = animatedRef();\n    _scrollTo(viewTag, x, y, animated);\n}\nexport function setGestureState(handlerTag, newState) {\n    'worklet';\n    if (!_WORKLET && !isChromeDebugger()) {\n        console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');\n    }\n    _setGestureState(handlerTag, newState);\n}\n"]},"metadata":{},"sourceType":"script"}