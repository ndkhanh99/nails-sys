{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _StyleSheet = _interopRequireDefault(require(\"react-native-web/dist/exports/StyleSheet\"));\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _drawer = require(\"@react-navigation/drawer\");\n\nvar Font = _interopRequireWildcard(require(\"expo-font\"));\n\nvar _expoAppLoading = _interopRequireDefault(require(\"expo-app-loading\"));\n\nvar _MainScreen = _interopRequireDefault(require(\"./screens/MainScreen\"));\n\nvar _AuthScreen = _interopRequireDefault(require(\"./screens/AuthScreen\"));\n\nvar _CategoryScreen = _interopRequireDefault(require(\"./screens/CategoryScreen\"));\n\nvar _SettingScreen = _interopRequireDefault(require(\"./screens/SettingScreen\"));\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\victhangnguyen\\\\nails-sys\\\\nails-sys-client\\\\App.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar App = function App() {\n  var _React$useState = _react.default.useState(false),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      isLoadingComplete = _React$useState2[0],\n      setIsLoadingComplete = _React$useState2[1];\n\n  var fetchFonts = function fetchFonts() {\n    return _regenerator.default.async(function fetchFonts$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regenerator.default.awrap(Font.loadAsync({\n              'Roboto-Black': require(\"./assets/fonts/Roboto-Black.ttf\"),\n              'Roboto-BlackItalic': require(\"./assets/fonts/Roboto-BlackItalic.ttf\"),\n              'roboto-Bold': require(\"./assets/fonts/Roboto-Bold.ttf\"),\n              'Roboto-BoldItalic': require(\"./assets/fonts/Roboto-BoldItalic.ttf\"),\n              'Roboto-Italic': require(\"./assets/fonts/Roboto-Italic.ttf\"),\n              'Roboto-Light': require(\"./assets/fonts/Roboto-Light.ttf\"),\n              'Roboto-LightItalic': require(\"./assets/fonts/Roboto-Light.ttf\"),\n              'Roboto-Medium': require(\"./assets/fonts/Roboto-Medium.ttf\"),\n              'Roboto-MediumItalic': require(\"./assets/fonts/Roboto-MediumItalic.ttf\"),\n              'roboto-Regular': require(\"./assets/fonts/Roboto-Regular.ttf\"),\n              'roboto-Thin': require(\"./assets/fonts/Roboto-Thin.ttf\"),\n              'Roboto-ThinItalic': require(\"./assets/fonts/Roboto-ThinItalic.ttf\")\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (!isLoadingComplete) {\n    return _react.default.createElement(_expoAppLoading.default, {\n      startAsync: function startAsync() {\n        return fetchFonts();\n      },\n      onFinish: function onFinish() {\n        return setIsLoadingComplete(true);\n      },\n      onError: function onError() {\n        return console.warn;\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 16\n      }\n    });\n  }\n\n  var Drawer = (0, _drawer.createDrawerNavigator)();\n  return _react.default.createElement(_native.NavigationContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(Drawer.Navigator, {\n    initialRouteName: \"Main\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(Drawer.Screen, {\n    name: \"Main\",\n    component: _MainScreen.default,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }), _react.default.createElement(Drawer.Screen, {\n    name: \"Auth\",\n    component: _AuthScreen.default,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }), _react.default.createElement(Drawer.Screen, {\n    name: \"Setting\",\n    component: _SettingScreen.default,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }), _react.default.createElement(Drawer.Screen, {\n    name: \"Category\",\n    component: _CategoryScreen.default,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  })));\n};\n\nvar _default = App;\nexports.default = _default;\n\nvar styles = _StyleSheet.default.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/victhangnguyen/nails-sys/nails-sys-client/App.js"],"names":["App","React","useState","isLoadingComplete","setIsLoadingComplete","fetchFonts","Font","loadAsync","require","console","warn","Drawer","MainScreen","AuthScreen","SettingScreen","CategoryScreen","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;;;;;;;;;;AAAA;;;;AAEA;;AAEA;;AAKA;;AACA;;AAGA;;AACA;;AACA;;AAEA;;;;;;;;;AAEA,IAAMA,GAAG,GAAG,SAANA,GAAM,GAAM;AACd,wBAAkDC,eAAMC,QAAN,CAAe,KAAf,CAAlD;AAAA;AAAA,MAAOC,iBAAP;AAAA,MAA0BC,oBAA1B;;AAEA,MAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CACTC,IAAI,CAACC,SAAL,CAAe;AACjB,8BAAgBC,OAAO,mCADN;AAEjB,oCAAsBA,OAAO,yCAFZ;AAGjB,6BAAeA,OAAO,kCAHL;AAIjB,mCAAqBA,OAAO,wCAJX;AAKjB,+BAAiBA,OAAO,oCALP;AAMjB,8BAAgBA,OAAO,mCANN;AAOjB,oCAAsBA,OAAO,mCAPZ;AAQjB,+BAAiBA,OAAO,oCARP;AASjB,qCAAuBA,OAAO,0CATb;AAUjB,gCAAkBA,OAAO,qCAVR;AAWjB,6BAAeA,OAAO,kCAXL;AAYjB,mCAAqBA,OAAO;AAZX,aAAf,CADS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAiBA,MAAI,CAACL,iBAAL,EAAwB;AACpB,WAAO,6BAAC,uBAAD;AAAY,MAAA,UAAU,EAAE;AAAA,eAAME,UAAU,EAAhB;AAAA,OAAxB;AAA4C,MAAA,QAAQ,EAAE;AAAA,eAAMD,oBAAoB,CAAC,IAAD,CAA1B;AAAA,OAAtD;AAAwF,MAAA,OAAO,EAAE;AAAA,eAAMK,OAAO,CAACC,IAAd;AAAA,OAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AAGD,MAAMC,MAAM,GAAG,oCAAf;AAEA,SACI,6BAAC,2BAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,6BAAC,MAAD,CAAQ,SAAR;AAAkB,IAAA,gBAAgB,EAAC,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,6BAAC,MAAD,CAAQ,MAAR;AAAe,IAAA,IAAI,EAAC,MAApB;AAA2B,IAAA,SAAS,EAAEC,mBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,6BAAC,MAAD,CAAQ,MAAR;AAAe,IAAA,IAAI,EAAC,MAApB;AAA2B,IAAA,SAAS,EAAEC,mBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI,6BAAC,MAAD,CAAQ,MAAR;AAAe,IAAA,IAAI,EAAC,SAApB;AAA8B,IAAA,SAAS,EAAEC,sBAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAII,6BAAC,MAAD,CAAQ,MAAR;AAAe,IAAA,IAAI,EAAC,UAApB;AAA+B,IAAA,SAAS,EAAEC,uBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ,CADJ;AAUH,CArCD;;eAuCef,G;;;AAEf,IAAMgB,MAAM,GAAGC,oBAAWC,MAAX,CAAkB;AAC7BC,EAAAA,SAAS,EAAE;AACPC,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,eAAe,EAAE,MAFV;AAGPC,IAAAA,UAAU,EAAE,QAHL;AAIPC,IAAAA,cAAc,EAAE;AAJT;AADkB,CAAlB,CAAf","sourcesContent":["import React from 'react';\r\nimport { StyleSheet } from 'react-native';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\n// import { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport { createDrawerNavigator } from '@react-navigation/drawer';\r\n\r\n\r\n// import useCachedResources from './hooks/useCachedResources';\r\n//!expo\r\nimport * as Font from 'expo-font';\r\nimport AppLoading from 'expo-app-loading';\r\n\r\n//! comps\r\nimport MainScreen from './screens/MainScreen';\r\nimport AuthScreen from './screens/AuthScreen';\r\nimport CategoryScreen from './screens/CategoryScreen';\r\nimport HomeScreen from './screens/MainScreen';\r\nimport SettingScreen from './screens/SettingScreen'\r\n\r\nconst App = () => {\r\n    const [isLoadingComplete, setIsLoadingComplete] = React.useState(false);\r\n\r\n    const fetchFonts = async () => {\r\n        await Font.loadAsync({\r\n            'Roboto-Black': require('./assets/fonts/Roboto-Black.ttf'),\r\n            'Roboto-BlackItalic': require('./assets/fonts/Roboto-BlackItalic.ttf'),\r\n            'roboto-Bold': require('./assets/fonts/Roboto-Bold.ttf'),\r\n            'Roboto-BoldItalic': require('./assets/fonts/Roboto-BoldItalic.ttf'),\r\n            'Roboto-Italic': require('./assets/fonts/Roboto-Italic.ttf'),\r\n            'Roboto-Light': require('./assets/fonts/Roboto-Light.ttf'),\r\n            'Roboto-LightItalic': require('./assets/fonts/Roboto-Light.ttf'),\r\n            'Roboto-Medium': require('./assets/fonts/Roboto-Medium.ttf'),\r\n            'Roboto-MediumItalic': require('./assets/fonts/Roboto-MediumItalic.ttf'),\r\n            'roboto-Regular': require('./assets/fonts/Roboto-Regular.ttf'),\r\n            'roboto-Thin': require('./assets/fonts/Roboto-Thin.ttf'),\r\n            'Roboto-ThinItalic': require('./assets/fonts/Roboto-ThinItalic.ttf'),\r\n        });\r\n    };\r\n\r\n    if (!isLoadingComplete) {\r\n        return <AppLoading startAsync={() => fetchFonts()} onFinish={() => setIsLoadingComplete(true)} onError={() => console.warn} />;\r\n    }\r\n\r\n    // const Stack = createNativeStackNavigator();\r\n    const Drawer = createDrawerNavigator();\r\n\r\n    return (\r\n        <NavigationContainer>\r\n            <Drawer.Navigator initialRouteName=\"Main\">\r\n                <Drawer.Screen name=\"Main\" component={MainScreen}/>\r\n                <Drawer.Screen name=\"Auth\" component={AuthScreen}/>\r\n                <Drawer.Screen name=\"Setting\" component={SettingScreen}/>\r\n                <Drawer.Screen name=\"Category\" component={CategoryScreen} />\r\n            </Drawer.Navigator>\r\n        </NavigationContainer>\r\n    );\r\n};\r\n\r\nexport default App;\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#fff',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n});"]},"metadata":{},"sourceType":"script"}