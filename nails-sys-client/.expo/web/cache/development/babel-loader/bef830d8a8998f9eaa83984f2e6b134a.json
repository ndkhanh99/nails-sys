{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GestureStateManager = void 0;\n\nvar _reanimatedWrapper = require(\"./reanimatedWrapper\");\n\nvar _State = require(\"../../State\");\n\nvar GestureStateManager = {\n  create: function () {\n    var _f = function _f(handlerTag) {\n      return {\n        begin: function () {\n          var _f = function _f() {\n            if (_reanimatedWrapper.Reanimated) {\n              _reanimatedWrapper.Reanimated.setGestureState(handlerTag, _State.State.BEGAN);\n            } else {\n              console.warn('react-native-reanimated is required in order to use synchronous state management');\n            }\n          };\n\n          _f._closure = {\n            Reanimated: _reanimatedWrapper.Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              BEGAN: _State.State.BEGAN\n            }\n          };\n          _f.asString = \"function _f(){const{Reanimated,handlerTag,State}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.BEGAN);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}}\";\n          _f.__workletHash = 8149384316327;\n          _f.__location = \"C:\\\\Users\\\\victhangnguyen\\\\nails-sys\\\\nails-sys-client\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (8:13)\";\n\n          global.__reanimatedWorkletInit(_f);\n\n          return _f;\n        }(),\n        activate: function () {\n          var _f = function _f() {\n            if (_reanimatedWrapper.Reanimated) {\n              _reanimatedWrapper.Reanimated.setGestureState(handlerTag, _State.State.ACTIVE);\n            } else {\n              console.warn('react-native-reanimated is required in order to use synchronous state management');\n            }\n          };\n\n          _f._closure = {\n            Reanimated: _reanimatedWrapper.Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              ACTIVE: _State.State.ACTIVE\n            }\n          };\n          _f.asString = \"function _f(){const{Reanimated,handlerTag,State}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.ACTIVE);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}}\";\n          _f.__workletHash = 1117524627396;\n          _f.__location = \"C:\\\\Users\\\\victhangnguyen\\\\nails-sys\\\\nails-sys-client\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (17:16)\";\n\n          global.__reanimatedWorkletInit(_f);\n\n          return _f;\n        }(),\n        fail: function () {\n          var _f = function _f() {\n            if (_reanimatedWrapper.Reanimated) {\n              _reanimatedWrapper.Reanimated.setGestureState(handlerTag, _State.State.FAILED);\n            } else {\n              console.warn('react-native-reanimated is required in order to use synchronous state management');\n            }\n          };\n\n          _f._closure = {\n            Reanimated: _reanimatedWrapper.Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              FAILED: _State.State.FAILED\n            }\n          };\n          _f.asString = \"function _f(){const{Reanimated,handlerTag,State}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.FAILED);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}}\";\n          _f.__workletHash = 16579675743275;\n          _f.__location = \"C:\\\\Users\\\\victhangnguyen\\\\nails-sys\\\\nails-sys-client\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (26:12)\";\n\n          global.__reanimatedWorkletInit(_f);\n\n          return _f;\n        }(),\n        end: function () {\n          var _f = function _f() {\n            if (_reanimatedWrapper.Reanimated) {\n              _reanimatedWrapper.Reanimated.setGestureState(handlerTag, _State.State.END);\n            } else {\n              console.warn('react-native-reanimated is required in order to use synchronous state management');\n            }\n          };\n\n          _f._closure = {\n            Reanimated: _reanimatedWrapper.Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              END: _State.State.END\n            }\n          };\n          _f.asString = \"function _f(){const{Reanimated,handlerTag,State}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.END);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}}\";\n          _f.__workletHash = 13760866678247;\n          _f.__location = \"C:\\\\Users\\\\victhangnguyen\\\\nails-sys\\\\nails-sys-client\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (35:11)\";\n\n          global.__reanimatedWorkletInit(_f);\n\n          return _f;\n        }()\n      };\n    };\n\n    _f._closure = {\n      Reanimated: _reanimatedWrapper.Reanimated,\n      State: {\n        BEGAN: _State.State.BEGAN,\n        ACTIVE: _State.State.ACTIVE,\n        FAILED: _State.State.FAILED,\n        END: _State.State.END\n      }\n    };\n    _f.asString = \"function create(handlerTag){const{Reanimated,State}=jsThis._closure;{return{begin:function(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.BEGAN);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}},activate:function(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.ACTIVE);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}},fail:function(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.FAILED);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}},end:function(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.END);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}};}}\";\n    _f.__workletHash = 5319495435492;\n    _f.__location = \"C:\\\\Users\\\\victhangnguyen\\\\nails-sys\\\\nails-sys-client\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }()\n};\nexports.GestureStateManager = GestureStateManager;","map":{"version":3,"sources":["gestureStateManager.ts"],"names":["GestureStateManager","create","begin","Reanimated","State","console","activate","fail","end"],"mappings":";;;;;AAAA;;AACA;;AASO,IAAMA,mBAAmB,GAAG;AACjCC,EAAAA,MADiC;AAAA,yBAC3B,UAD2B,EACmB;AAElD,aAAO;AACLC,QAAAA,KAAK;AAAA,iCAAQ;AAEX,gBAAA,6BAAA,EAAgB;AACdC,4CAAAA,eAAAA,CAAAA,UAAAA,EAAuCC,aAAvCD,KAAAA;AADF,aAAA,MAEO;AACLE,cAAAA,OAAO,CAAPA,IAAAA,CAAAA,kFAAAA;AAGD;AATE,WACA;;AAAA;AAAA,wBAJX,6BAIW;AAAA,wBAH2C,UAG3C;AAAA;AAAA,qBAH2C,aAAA;AAG3C;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,WADA;AAYLC,QAAAA,QAAQ;AAAA,iCAAQ;AAEd,gBAAA,6BAAA,EAAgB;AACdH,4CAAAA,eAAAA,CAAAA,UAAAA,EAAuCC,aAAvCD,MAAAA;AADF,aAAA,MAEO;AACLE,cAAAA,OAAO,CAAPA,IAAAA,CAAAA,kFAAAA;AAGD;AApBE,WAYG;;AAAA;AAAA,wBAfd,6BAec;AAAA,wBAdwC,UAcxC;AAAA;AAAA,sBAdwC,aAAA;AAcxC;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,WAZH;AAuBLE,QAAAA,IAAI;AAAA,iCAAQ;AAEV,gBAAA,6BAAA,EAAgB;AACdJ,4CAAAA,eAAAA,CAAAA,UAAAA,EAAuCC,aAAvCD,MAAAA;AADF,aAAA,MAEO;AACLE,cAAAA,OAAO,CAAPA,IAAAA,CAAAA,kFAAAA;AAGD;AA/BE,WAuBD;;AAAA;AAAA,wBA1BV,6BA0BU;AAAA,wBAzB4C,UAyB5C;AAAA;AAAA,sBAzB4C,aAAA;AAyB5C;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,WAvBC;AAkCLG,QAAAA,GAAG;AAAA,iCAAQ;AAET,gBAAA,6BAAA,EAAgB;AACdL,4CAAAA,eAAAA,CAAAA,UAAAA,EAAuCC,aAAvCD,GAAAA;AADF,aAAA,MAEO;AACLE,cAAAA,OAAO,CAAPA,IAAAA,CAAAA,kFAAAA;AAGD;AACF,WATE;;AAAA;AAAA,wBArCT,6BAqCS;AAAA,wBApC6C,UAoC7C;AAAA;AAAA,mBApC6C,aAAA;AAoC7C;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAlCE,OAAP;AA6CD,KAhDgC;;AAAA;AAAA,kBAGxB,6BAHwB;AAAA;AAAA,eAIhB,aAAA,KAJgB;AAAA,gBAeb,aAAA,MAfa;AAAA,gBA0BjB,aAAA,MA1BiB;AAAA,aAqClB,aAAA;AArCkB;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,CAA5B","sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"script"}