{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createHandler;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _Platform = _interopRequireDefault(require(\"react-native-web/dist/exports/Platform\"));\n\nvar _Touchable = _interopRequireDefault(require(\"react-native-web/dist/exports/Touchable\"));\n\nvar _UIManager = _interopRequireDefault(require(\"react-native-web/dist/exports/UIManager\"));\n\nvar _DeviceEventEmitter = _interopRequireDefault(require(\"react-native-web/dist/exports/DeviceEventEmitter\"));\n\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\n\nvar _RNGestureHandlerModule = _interopRequireDefault(require(\"../RNGestureHandlerModule\"));\n\nvar _State = require(\"../State\");\n\nvar _handlersRegistry = require(\"./handlersRegistry\");\n\nvar _gestureHandlerCommon = require(\"./gestureHandlerCommon\");\n\nvar _stateToPropMappings;\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar _UIManagerAny$getView, _UIManagerAny$getView2, _UIManagerAny$getCons;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar UIManagerAny = _UIManager.default;\nvar customGHEventsConfig = {\n  onGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n};\nUIManagerAny.genericDirectEventTypes = (0, _extends2.default)({}, UIManagerAny.genericDirectEventTypes, customGHEventsConfig);\nvar UIManagerConstants = (_UIManagerAny$getView = (_UIManagerAny$getView2 = UIManagerAny.getViewManagerConfig) === null || _UIManagerAny$getView2 === void 0 ? void 0 : _UIManagerAny$getView2.call(UIManagerAny, 'getConstants')) !== null && _UIManagerAny$getView !== void 0 ? _UIManagerAny$getView : (_UIManagerAny$getCons = UIManagerAny.getConstants) === null || _UIManagerAny$getCons === void 0 ? void 0 : _UIManagerAny$getCons.call(UIManagerAny);\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = (0, _extends2.default)({}, UIManagerConstants.genericDirectEventTypes, customGHEventsConfig);\n}\n\nvar _UIManagerAny$setJSRe = UIManagerAny.setJSResponder,\n    oldSetJSResponder = _UIManagerAny$setJSRe === void 0 ? function () {} : _UIManagerAny$setJSRe,\n    _UIManagerAny$clearJS = UIManagerAny.clearJSResponder,\n    oldClearJSResponder = _UIManagerAny$clearJS === void 0 ? function () {} : _UIManagerAny$clearJS;\n\nUIManagerAny.setJSResponder = function (tag, blockNativeResponder) {\n  _RNGestureHandlerModule.default.handleSetJSResponder(tag, blockNativeResponder);\n\n  oldSetJSResponder(tag, blockNativeResponder);\n};\n\nUIManagerAny.clearJSResponder = function () {\n  _RNGestureHandlerModule.default.handleClearJSResponder();\n\n  oldClearJSResponder();\n};\n\nvar allowTouches = true;\nvar DEV_ON_ANDROID = __DEV__ && _Platform.default.OS === 'android';\n\nif (DEV_ON_ANDROID) {\n  _DeviceEventEmitter.default.addListener('toggleElementInspector', function () {\n    allowTouches = !allowTouches;\n  });\n}\n\nfunction hasUnresolvedRefs(props) {\n  var extract = function extract(refs) {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n\n    return refs.some(function (r) {\n      return r && r.current === null;\n    });\n  };\n\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nvar stateToPropMappings = (_stateToPropMappings = {}, (0, _defineProperty3.default)(_stateToPropMappings, _State.State.UNDETERMINED, undefined), (0, _defineProperty3.default)(_stateToPropMappings, _State.State.BEGAN, 'onBegan'), (0, _defineProperty3.default)(_stateToPropMappings, _State.State.FAILED, 'onFailed'), (0, _defineProperty3.default)(_stateToPropMappings, _State.State.CANCELLED, 'onCancelled'), (0, _defineProperty3.default)(_stateToPropMappings, _State.State.ACTIVE, 'onActivated'), (0, _defineProperty3.default)(_stateToPropMappings, _State.State.END, 'onEnded'), _stateToPropMappings);\n\nfunction createHandler(_ref) {\n  var name = _ref.name,\n      _ref$allowedProps = _ref.allowedProps,\n      allowedProps = _ref$allowedProps === void 0 ? [] : _ref$allowedProps,\n      _ref$config = _ref.config,\n      config = _ref$config === void 0 ? {} : _ref$config,\n      transformProps = _ref.transformProps,\n      _ref$customNativeProp = _ref.customNativeProps,\n      customNativeProps = _ref$customNativeProp === void 0 ? [] : _ref$customNativeProp;\n\n  var Handler = function (_React$Component) {\n    (0, _inherits2.default)(Handler, _React$Component);\n\n    var _super = _createSuper(Handler);\n\n    function Handler(props) {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, Handler);\n      _this = _super.call(this, props);\n\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"handlerTag\", void 0);\n\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"config\", void 0);\n\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"propsRef\", void 0);\n\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"viewNode\", void 0);\n\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"viewTag\", void 0);\n\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"updateEnqueued\", null);\n\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"inspectorToggleListener\", void 0);\n\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"onGestureHandlerEvent\", function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          var _this$props$onGesture, _this$props;\n\n          (_this$props$onGesture = (_this$props = _this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props, event);\n        } else {\n          var _this$props$onGesture2, _this$props2;\n\n          (_this$props$onGesture2 = (_this$props2 = _this.props).onGestureHandlerEvent) === null || _this$props$onGesture2 === void 0 ? void 0 : _this$props$onGesture2.call(_this$props2, event);\n        }\n      });\n\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"onGestureHandlerStateChange\", function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          var _this$props$onHandler, _this$props3;\n\n          (_this$props$onHandler = (_this$props3 = _this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props3, event);\n          var state = event.nativeEvent.state;\n          var stateEventName = stateToPropMappings[state];\n          var eventHandler = stateEventName && _this.props[stateEventName];\n\n          if (eventHandler && typeof eventHandler === 'function') {\n            eventHandler(event);\n          }\n        } else {\n          var _this$props$onGesture3, _this$props4;\n\n          (_this$props$onGesture3 = (_this$props4 = _this.props).onGestureHandlerStateChange) === null || _this$props$onGesture3 === void 0 ? void 0 : _this$props$onGesture3.call(_this$props4, event);\n        }\n      });\n\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"refHandler\", function (node) {\n        _this.viewNode = node;\n        var child = React.Children.only(_this.props.children);\n        var ref = child.ref;\n\n        if (ref !== null) {\n          if (typeof ref === 'function') {\n            ref(node);\n          } else {\n            ref.current = node;\n          }\n        }\n      });\n\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"createGestureHandler\", function (newConfig) {\n        _this.config = newConfig;\n\n        _RNGestureHandlerModule.default.createGestureHandler(name, _this.handlerTag, newConfig);\n      });\n\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"attachGestureHandler\", function (newViewTag) {\n        _this.viewTag = newViewTag;\n\n        if (_Platform.default.OS === 'web') {\n          _RNGestureHandlerModule.default.attachGestureHandler(_this.handlerTag, newViewTag, false, _this.propsRef);\n        } else {\n          _RNGestureHandlerModule.default.attachGestureHandler(_this.handlerTag, newViewTag, false);\n        }\n      });\n\n      _defineProperty((0, _assertThisInitialized2.default)(_this), \"updateGestureHandler\", function (newConfig) {\n        _this.config = newConfig;\n\n        _RNGestureHandlerModule.default.updateGestureHandler(_this.handlerTag, newConfig);\n      });\n\n      _this.handlerTag = (0, _handlersRegistry.getNextHandlerTag)();\n      _this.config = {};\n      _this.propsRef = React.createRef();\n      _this.state = {\n        allowTouches: allowTouches\n      };\n\n      if (props.id) {\n        if (_handlersRegistry.handlerIDToTag[props.id] !== undefined) {\n          throw new Error(\"Handler with ID \\\"\" + props.id + \"\\\" already registered\");\n        }\n\n        _handlersRegistry.handlerIDToTag[props.id] = _this.handlerTag;\n      }\n\n      return _this;\n    }\n\n    (0, _createClass2.default)(Handler, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n\n        var props = this.props;\n\n        if (DEV_ON_ANDROID) {\n          this.inspectorToggleListener = _DeviceEventEmitter.default.addListener('toggleElementInspector', function () {\n            _this2.setState(function (_) {\n              return {\n                allowTouches: allowTouches\n              };\n            });\n\n            _this2.update();\n          });\n        }\n\n        if (hasUnresolvedRefs(props)) {\n          this.updateEnqueued = setImmediate(function () {\n            _this2.updateEnqueued = null;\n\n            _this2.update();\n          });\n        }\n\n        this.createGestureHandler((0, _gestureHandlerCommon.filterConfig)(transformProps ? transformProps(this.props) : this.props, [].concat((0, _toConsumableArray2.default)(allowedProps), (0, _toConsumableArray2.default)(customNativeProps)), config));\n        this.attachGestureHandler((0, _gestureHandlerCommon.findNodeHandle)(this.viewNode));\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        var viewTag = (0, _gestureHandlerCommon.findNodeHandle)(this.viewNode);\n\n        if (this.viewTag !== viewTag) {\n          this.attachGestureHandler(viewTag);\n        }\n\n        this.update();\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        var _this$inspectorToggle;\n\n        (_this$inspectorToggle = this.inspectorToggleListener) === null || _this$inspectorToggle === void 0 ? void 0 : _this$inspectorToggle.remove();\n\n        _RNGestureHandlerModule.default.dropGestureHandler(this.handlerTag);\n\n        if (this.updateEnqueued) {\n          clearImmediate(this.updateEnqueued);\n        }\n\n        var handlerID = this.props.id;\n\n        if (handlerID) {\n          delete _handlersRegistry.handlerIDToTag[handlerID];\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        var newConfig = (0, _gestureHandlerCommon.filterConfig)(transformProps ? transformProps(this.props) : this.props, [].concat((0, _toConsumableArray2.default)(allowedProps), (0, _toConsumableArray2.default)(customNativeProps)), config);\n\n        if (!(0, _isEqual.default)(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(updates) {\n        var mergedProps = (0, _extends2.default)({}, this.props, updates);\n        var newConfig = (0, _gestureHandlerCommon.filterConfig)(transformProps ? transformProps(mergedProps) : mergedProps, [].concat((0, _toConsumableArray2.default)(allowedProps), (0, _toConsumableArray2.default)(customNativeProps)), config);\n        this.updateGestureHandler(newConfig);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var gestureEventHandler = this.onGestureHandlerEvent;\n        var _this$props5 = this.props,\n            onGestureEvent = _this$props5.onGestureEvent,\n            onGestureHandlerEvent = _this$props5.onGestureHandlerEvent;\n\n        if (onGestureEvent && typeof onGestureEvent !== 'function') {\n          if (onGestureHandlerEvent) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n\n          gestureEventHandler = onGestureEvent;\n        } else {\n          if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n\n        var gestureStateEventHandler = this.onGestureHandlerStateChange;\n        var _this$props6 = this.props,\n            onHandlerStateChange = _this$props6.onHandlerStateChange,\n            onGestureHandlerStateChange = _this$props6.onGestureHandlerStateChange;\n\n        if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n          if (onGestureHandlerStateChange) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n\n          gestureStateEventHandler = onHandlerStateChange;\n        } else {\n          if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n\n        var events = {\n          onGestureHandlerEvent: this.state.allowTouches ? gestureEventHandler : undefined,\n          onGestureHandlerStateChange: this.state.allowTouches ? gestureStateEventHandler : undefined\n        };\n        this.propsRef.current = events;\n        var child = React.Children.only(this.props.children);\n        var grandChildren = child.props.children;\n\n        if (_Touchable.default.TOUCH_TARGET_DEBUG && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {\n          grandChildren = React.Children.toArray(grandChildren);\n          grandChildren.push(_Touchable.default.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop\n          }));\n        }\n\n        return React.cloneElement(child, (0, _extends2.default)({\n          ref: this.refHandler,\n          collapsable: false\n        }, events), grandChildren);\n      }\n    }]);\n    return Handler;\n  }(React.Component);\n\n  _defineProperty(Handler, \"displayName\", name);\n\n  return Handler;\n}","map":{"version":3,"sources":["createHandler.ts"],"names":["UIManagerAny","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","UIManagerConstants","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","RNGestureHandlerModule","allowTouches","DEV_ON_ANDROID","__DEV__","Platform","DeviceEventEmitter","extract","refs","Array","r","props","stateToPropMappings","State","allowedProps","config","customNativeProps","React","constructor","handlerIDToTag","componentDidMount","_","hasUnresolvedRefs","setImmediate","filterConfig","transformProps","findNodeHandle","componentDidUpdate","viewTag","componentWillUnmount","clearImmediate","handlerID","event","state","stateEventName","eventHandler","node","child","ref","newConfig","newViewTag","update","deepEqual","setNativeProps","mergedProps","updates","render","gestureEventHandler","onGestureEvent","gestureStateEventHandler","onHandlerStateChange","events","undefined","grandChildren","Touchable","color","hitSlop","collapsable"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  Touchable,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\nimport { handlerIDToTag, getNextHandlerTag } from './handlersRegistry';\n\nimport {\n  BaseGestureHandlerProps,\n  filterConfig,\n  GestureEvent,\n  HandlerStateChangeEvent,\n  findNodeHandle,\n} from './gestureHandlerCommon';\nimport { ValueOf } from '../typeUtils';\n\nconst UIManagerAny = UIManager as any;\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<\n  HandlerPropsT extends Record<string, unknown>\n> = Readonly<{\n  name: string;\n  allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n  config: Readonly<Record<string, unknown>>;\n  transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n  customNativeProps?: Readonly<string[]>;\n}>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private viewNode: any;\n    private viewTag?: number;\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update();\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update();\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update();\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      }\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onGestureEvent?.(event);\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onHandlerStateChange?.(event);\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\n          this.handlerTag,\n          newViewTag,\n          false,\n          this.propsRef\n        );\n      } else {\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          false\n        );\n      }\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n    };\n\n    private update() {\n      const newConfig = filterConfig(\n        transformProps ? transformProps(this.props) : this.props,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      if (!deepEqual(this.config, newConfig)) {\n        this.updateGestureHandler(newConfig);\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const {\n        onGestureEvent,\n        onGestureHandlerEvent,\n      }: OnGestureEventHandlers = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      const child: any = React.Children.only(this.props.children);\n      let grandChildren = child.props.children;\n      if (\n        Touchable.TOUCH_TARGET_DEBUG &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop,\n          })\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"]},"metadata":{},"sourceType":"script"}