{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _StyleSheet = _interopRequireDefault(require(\"react-native-web/dist/exports/StyleSheet\"));\n\nvar _Text = _interopRequireDefault(require(\"react-native-web/dist/exports/Text\"));\n\nvar _View = _interopRequireDefault(require(\"react-native-web/dist/exports/View\"));\n\nvar _FlatList = _interopRequireDefault(require(\"react-native-web/dist/exports/FlatList\"));\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _CategoryItem = _interopRequireDefault(require(\"../components/CategoryItem\"));\n\nvar _grid = _interopRequireDefault(require(\"../constants/layout/grid\"));\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\victhangnguyen\\\\nails-sys\\\\nails-sys-client\\\\screens\\\\CategoryScreen.js\";\n\nvar CategoryScreen = function CategoryScreen(props) {\n  var _React$useState = _react.default.useState([]),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      categories = _React$useState2[0],\n      setCategories = _React$useState2[1];\n\n  var getCategories = function getCategories() {\n    var response;\n    return _regenerator.default.async(function getCategories$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regenerator.default.awrap(_axios.default.get('https://jsonplaceholder.typicode.com/users'));\n\n          case 2:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var loadCategories = function loadCategories() {\n    return _regenerator.default.async(function loadCategories$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regenerator.default.awrap(getCategories().then(function (res) {\n              setCategories(res.data);\n            }).catch(function (error) {\n              return console.log(\"error: \", error);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  _react.default.useEffect(function () {\n    loadCategories();\n  }, []);\n\n  var formatData = function formatData(data, numColumns) {\n    var numberOfFullRows = Math.floor(data.length / numColumns);\n    var numberOfElementLastRows = data.length - numberOfFullRows * numColumns;\n\n    while (numberOfElementLastRows !== 0 && numberOfElementLastRows !== numColumns) {\n      data.push({\n        username: \"blank-\" + numberOfElementLastRows,\n        empty: true\n      });\n      numberOfElementLastRows += 1;\n    }\n\n    return data;\n  };\n\n  var CategoryItemWithEmpty = function CategoryItemWithEmpty(itemData) {\n    if (itemData.item.empty === true) {\n      return _react.default.createElement(_CategoryItem.default, {\n        item: itemData.item,\n        empty: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 20\n        }\n      });\n    }\n\n    return _react.default.createElement(_CategoryItem.default, {\n      item: itemData.item,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 16\n      }\n    });\n  };\n\n  return _react.default.createElement(_View.default, {\n    style: styles.screen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_View.default, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_FlatList.default, {\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    },\n    data: formatData(categories, _grid.default.numColumns),\n    style: styles.container,\n    renderItem: function renderItem(itemData) {\n      return CategoryItemWithEmpty(itemData);\n    },\n    numColumns: _grid.default.numColumns,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  })));\n};\n\nvar styles = _StyleSheet.default.create({\n  screen: {\n    flex: 1,\n    padding: 10\n  },\n  container: {}\n});\n\nvar _default = CategoryScreen;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/victhangnguyen/nails-sys/nails-sys-client/screens/CategoryScreen.js"],"names":["CategoryScreen","props","React","useState","categories","setCategories","getCategories","axios","get","response","loadCategories","then","res","data","catch","error","console","log","useEffect","formatData","numColumns","numberOfFullRows","Math","floor","length","numberOfElementLastRows","push","username","empty","CategoryItemWithEmpty","itemData","item","styles","screen","id","Grid","container","StyleSheet","create","flex","padding"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { StyleSheet, Text, View, FlatList } from 'react-native';\r\n//! API\r\nimport axios from 'axios';\r\n//! comps\r\nimport CategoryItem from '../components/CategoryItem';\r\n//! sass\r\nimport Grid from '../constants/layout/grid';\r\n\r\nconst CategoryScreen = (props) => {\r\n    const [categories, setCategories] = React.useState([]);\r\n\r\n    const getCategories = async () => {\r\n        const response = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n        return response;\r\n    };\r\n\r\n    const loadCategories = async () => {\r\n        await getCategories()\r\n            .then((res) => {\r\n                setCategories(res.data);\r\n            })\r\n            .catch((error) => console.log(`error: `, error));\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        loadCategories();\r\n    }, []);\r\n\r\n    const formatData = (data, numColumns) => {\r\n        const numberOfFullRows = Math.floor(data.length / numColumns); //! chia lay nguyen\r\n        let numberOfElementLastRows = data.length - numberOfFullRows * numColumns;\r\n        while (numberOfElementLastRows !== 0 && numberOfElementLastRows !== numColumns) {\r\n            //! add [element data except index and separators]\r\n            //! username and id\r\n            data.push({ username: `blank-${numberOfElementLastRows}`, empty: true });\r\n            numberOfElementLastRows += 1;\r\n        }\r\n        return data;\r\n    };\r\n\r\n    const CategoryItemWithEmpty = (itemData) => {\r\n        if (itemData.item.empty === true) {\r\n            return <CategoryItem item={itemData.item} empty={true} />;\r\n        }\r\n        return <CategoryItem item={itemData.item} />;\r\n    };\r\n    \r\n    return (\r\n        <View style={styles.screen}>\r\n            <View>\r\n                <FlatList\r\n                    keyExtractor={(item) => item.id}\r\n                    data={formatData(categories, Grid.numColumns)}\r\n                    // data={categories}\r\n                    style={styles.container}\r\n                    renderItem={(itemData) => CategoryItemWithEmpty(itemData)}\r\n                    numColumns={Grid.numColumns}\r\n                />\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    screen: {\r\n        flex: 1,\r\n        padding: 10\r\n    },\r\n    container: {},\r\n});\r\n\r\nexport default CategoryScreen;\r\n"]},"metadata":{},"sourceType":"script"}