{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport * as Font from 'expo-font';\nimport AppLoading from 'expo-app-loading';\nimport MainScreen from \"./screens/MainScreen\";\nimport AuthScreen from \"./screens/AuthScreen\";\nimport CategoryScreen from \"./screens/CategoryScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar App = function App() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoadingComplete = _React$useState2[0],\n      setIsLoadingComplete = _React$useState2[1];\n\n  var fetchFonts = function fetchFonts() {\n    return _regeneratorRuntime.async(function fetchFonts$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Font.loadAsync({\n              'Roboto-Black': require(\"./assets/fonts/Roboto-Black.ttf\"),\n              'Roboto-BlackItalic': require(\"./assets/fonts/Roboto-BlackItalic.ttf\"),\n              'roboto-Bold': require(\"./assets/fonts/Roboto-Bold.ttf\"),\n              'Roboto-BoldItalic': require(\"./assets/fonts/Roboto-BoldItalic.ttf\"),\n              'Roboto-Italic': require(\"./assets/fonts/Roboto-Italic.ttf\"),\n              'Roboto-Light': require(\"./assets/fonts/Roboto-Light.ttf\"),\n              'Roboto-LightItalic': require(\"./assets/fonts/Roboto-Light.ttf\"),\n              'Roboto-Medium': require(\"./assets/fonts/Roboto-Medium.ttf\"),\n              'Roboto-MediumItalic': require(\"./assets/fonts/Roboto-MediumItalic.ttf\"),\n              'roboto-Regular': require(\"./assets/fonts/Roboto-Regular.ttf\"),\n              'roboto-Thin': require(\"./assets/fonts/Roboto-Thin.ttf\"),\n              'Roboto-ThinItalic': require(\"./assets/fonts/Roboto-ThinItalic.ttf\")\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (!isLoadingComplete) {\n    return _jsx(AppLoading, {\n      startAsync: function startAsync() {\n        return fetchFonts();\n      },\n      onFinish: function onFinish() {\n        return setIsLoadingComplete(true);\n      },\n      onError: function onError() {\n        return console.warn;\n      }\n    });\n  }\n\n  var Stack = createNativeStackNavigator();\n  return _jsx(NavigationContainer, {\n    children: _jsxs(Stack.Navigator, {\n      initialRouteName: \"Main\",\n      children: [_jsx(Stack.Screen, {\n        name: \"Main\",\n        component: MainScreen,\n        options: {\n          headerShown: false\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Auth\",\n        component: AuthScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Category\",\n        component: CategoryScreen\n      })]\n    })\n  });\n};\n\nexport default App;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/victhangnguyen/nails-sys/nails-sys-client/App.js"],"names":["React","NavigationContainer","createNativeStackNavigator","Font","AppLoading","MainScreen","AuthScreen","CategoryScreen","App","useState","isLoadingComplete","setIsLoadingComplete","fetchFonts","loadAsync","require","console","warn","Stack","headerShown","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,0BAAT,QAA2C,gCAA3C;AAGA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AAGA,OAAOC,UAAP;AACA,OAAOC,UAAP;AACA,OAAOC,cAAP;;;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AACd,wBAAkDR,KAAK,CAACS,QAAN,CAAe,KAAf,CAAlD;AAAA;AAAA,MAAOC,iBAAP;AAAA,MAA0BC,oBAA1B;;AAEA,MAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACTT,IAAI,CAACU,SAAL,CAAe;AACjB,8BAAgBC,OAAO,mCADN;AAEjB,oCAAsBA,OAAO,yCAFZ;AAGjB,6BAAeA,OAAO,kCAHL;AAIjB,mCAAqBA,OAAO,wCAJX;AAKjB,+BAAiBA,OAAO,oCALP;AAMjB,8BAAgBA,OAAO,mCANN;AAOjB,oCAAsBA,OAAO,mCAPZ;AAQjB,+BAAiBA,OAAO,oCARP;AASjB,qCAAuBA,OAAO,0CATb;AAUjB,gCAAkBA,OAAO,qCAVR;AAWjB,6BAAeA,OAAO,kCAXL;AAYjB,mCAAqBA,OAAO;AAZX,aAAf,CADS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAiBA,MAAI,CAACJ,iBAAL,EAAwB;AACpB,WAAO,KAAC,UAAD;AAAY,MAAA,UAAU,EAAE;AAAA,eAAME,UAAU,EAAhB;AAAA,OAAxB;AAA4C,MAAA,QAAQ,EAAE;AAAA,eAAMD,oBAAoB,CAAC,IAAD,CAA1B;AAAA,OAAtD;AAAwF,MAAA,OAAO,EAAE;AAAA,eAAMI,OAAO,CAACC,IAAd;AAAA;AAAjG,MAAP;AACH;;AAED,MAAMC,KAAK,GAAGf,0BAA0B,EAAxC;AAEA,SACI,KAAC,mBAAD;AAAA,cACI,MAAC,KAAD,CAAO,SAAP;AAAiB,MAAA,gBAAgB,EAAC,MAAlC;AAAA,iBACI,KAAC,KAAD,CAAO,MAAP;AAAc,QAAA,IAAI,EAAC,MAAnB;AAA0B,QAAA,SAAS,EAAEG,UAArC;AAAiD,QAAA,OAAO,EAAE;AAACa,UAAAA,WAAW,EAAE;AAAd;AAA1D,QADJ,EAEI,KAAC,KAAD,CAAO,MAAP;AAAc,QAAA,IAAI,EAAC,MAAnB;AAA0B,QAAA,SAAS,EAAEZ;AAArC,QAFJ,EAGI,KAAC,KAAD,CAAO,MAAP;AAAc,QAAA,IAAI,EAAC,UAAnB;AAA8B,QAAA,SAAS,EAAEC;AAAzC,QAHJ;AAAA;AADJ,IADJ;AASH,CAnCD;;AAqCA,eAAeC,GAAf;AAEA,IAAMW,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC7BC,EAAAA,SAAS,EAAE;AACPC,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,eAAe,EAAE,MAFV;AAGPC,IAAAA,UAAU,EAAE,QAHL;AAIPC,IAAAA,cAAc,EAAE;AAJT;AADkB,CAAlB,CAAf","sourcesContent":["import React from 'react';\r\nimport { StyleSheet, Text, View, SafeAreaView, TouchableOpacity } from 'react-native';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\n// import useCachedResources from './hooks/useCachedResources';\r\n//!expo\r\nimport * as Font from 'expo-font';\r\nimport AppLoading from 'expo-app-loading';\r\n\r\n//! comps\r\nimport MainScreen from './screens/MainScreen';\r\nimport AuthScreen from './screens/AuthScreen';\r\nimport CategoryScreen from './screens/CategoryScreen';\r\n\r\nconst App = () => {\r\n    const [isLoadingComplete, setIsLoadingComplete] = React.useState(false);\r\n\r\n    const fetchFonts = async () => {\r\n        await Font.loadAsync({\r\n            'Roboto-Black': require('./assets/fonts/Roboto-Black.ttf'),\r\n            'Roboto-BlackItalic': require('./assets/fonts/Roboto-BlackItalic.ttf'),\r\n            'roboto-Bold': require('./assets/fonts/Roboto-Bold.ttf'),\r\n            'Roboto-BoldItalic': require('./assets/fonts/Roboto-BoldItalic.ttf'),\r\n            'Roboto-Italic': require('./assets/fonts/Roboto-Italic.ttf'),\r\n            'Roboto-Light': require('./assets/fonts/Roboto-Light.ttf'),\r\n            'Roboto-LightItalic': require('./assets/fonts/Roboto-Light.ttf'),\r\n            'Roboto-Medium': require('./assets/fonts/Roboto-Medium.ttf'),\r\n            'Roboto-MediumItalic': require('./assets/fonts/Roboto-MediumItalic.ttf'),\r\n            'roboto-Regular': require('./assets/fonts/Roboto-Regular.ttf'),\r\n            'roboto-Thin': require('./assets/fonts/Roboto-Thin.ttf'),\r\n            'Roboto-ThinItalic': require('./assets/fonts/Roboto-ThinItalic.ttf'),\r\n        });\r\n    };\r\n\r\n    if (!isLoadingComplete) {\r\n        return <AppLoading startAsync={() => fetchFonts()} onFinish={() => setIsLoadingComplete(true)} onError={() => console.warn} />;\r\n    }\r\n\r\n    const Stack = createNativeStackNavigator();\r\n\r\n    return (\r\n        <NavigationContainer>\r\n            <Stack.Navigator initialRouteName=\"Main\">\r\n                <Stack.Screen name=\"Main\" component={MainScreen} options={{headerShown: false}} />\r\n                <Stack.Screen name=\"Auth\" component={AuthScreen} />\r\n                <Stack.Screen name=\"Category\" component={CategoryScreen} />\r\n            </Stack.Navigator>\r\n        </NavigationContainer>\r\n    );\r\n};\r\n\r\nexport default App;\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#fff',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}